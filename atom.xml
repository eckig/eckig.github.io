<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[eckig]]></title>
  <link href="http://eckig.github.io/atom.xml" rel="self"/>
  <link href="http://eckig.github.io/"/>
  <updated>2014-08-19T19:56:34+02:00</updated>
  <id>http://eckig.github.io/</id>
  <author>
    <name><![CDATA[Steffen Rachner]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[JavaFX Color Derivation]]></title>
    <link href="http://eckig.github.io/blog/2014/08/18/javafx-color-derivation/"/>
    <updated>2014-08-18T18:35:51+02:00</updated>
    <id>http://eckig.github.io/blog/2014/08/18/javafx-color-derivation</id>
    <content type="html"><![CDATA[<p>A very powerful and often underestimated feature of JavaFX is its CSS Color Derivation.<br/>
But let us start at the beginning by explaining two prerequisites:</p>

<ol>
<li>The Default JavaFX 8 Theme (<a href="http://fxexperience.com/2013/01/modena-new-theme-for-javafx-8/">Modena</a>) only defines a few colors statically in its stylesheet. The rest is derived by JavaFX&rsquo;s color functions (ladder and derive - see the <a href="http://docs.oracle.com/javase/8/javafx/api/javafx/scene/doc-files/cssref.html#typecolor">CSS Reference</a>) or referenced as color variables.</li>
<li>If you start to apply a custom styles to a Node in the scenegraph, these styles will also be applied to all children of this Node (if applicable). So changing a color variable on a single node will change the corresponding colors, derived colors and referenced colors on all child nodes in the scenegraph, but not on any of its parent nodes.</li>
</ol>


<p>If we combine both together we can create these three Buttons with ease (the first one is a regular one, just to show the default theme):<br/>
<img src="http://eckig.github.io/assets/images/javafx-color-derivation-screenshot-1.png" alt="Java FX Color derivation example" /></p>

<!-- more -->


<p>But let&rsquo;s start with the Java Code for our little example:</p>

<figure class='code'><figcaption><span>Test.java</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Main</span> <span class="kd">extends</span> <span class="n">Application</span> <span class="o">{</span>
</span><span class='line'>    <span class="nd">@Override</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">start</span><span class="o">(</span><span class="n">Stage</span> <span class="n">primaryStage</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">Button</span> <span class="n">red</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">Button</span><span class="o">(</span><span class="s">&quot;red&quot;</span><span class="o">);</span>
</span><span class='line'>        <span class="n">red</span><span class="o">.</span><span class="na">getStyleClass</span><span class="o">().</span><span class="na">add</span><span class="o">(</span><span class="s">&quot;red&quot;</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">Button</span> <span class="n">green</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">Button</span><span class="o">(</span><span class="s">&quot;green&quot;</span><span class="o">);</span>
</span><span class='line'>        <span class="n">green</span><span class="o">.</span><span class="na">getStyleClass</span><span class="o">().</span><span class="na">add</span><span class="o">(</span><span class="s">&quot;green&quot;</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">Button</span> <span class="n">regular</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">Button</span><span class="o">(</span><span class="s">&quot;regular&quot;</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">BorderPane</span> <span class="n">root</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">BorderPane</span><span class="o">();</span>
</span><span class='line'>        <span class="n">root</span><span class="o">.</span><span class="na">setTop</span><span class="o">(</span><span class="k">new</span> <span class="nf">ToolBar</span><span class="o">(</span><span class="n">regular</span><span class="o">,</span> <span class="n">red</span><span class="o">,</span> <span class="n">green</span><span class="o">));</span>
</span><span class='line'>        <span class="n">Scene</span> <span class="n">scene</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">Scene</span><span class="o">(</span><span class="n">root</span><span class="o">,</span> <span class="mi">400</span><span class="o">,</span> <span class="mi">400</span><span class="o">);</span>
</span><span class='line'>        <span class="n">scene</span><span class="o">.</span><span class="na">getStylesheets</span><span class="o">().</span><span class="na">add</span><span class="o">(</span><span class="n">getClass</span><span class="o">().</span><span class="na">getResource</span><span class="o">(</span><span class="s">&quot;application.css&quot;</span><span class="o">).</span><span class="na">toExternalForm</span><span class="o">());</span>
</span><span class='line'>        <span class="n">primaryStage</span><span class="o">.</span><span class="na">setScene</span><span class="o">(</span><span class="n">scene</span><span class="o">);</span>
</span><span class='line'>        <span class="n">primaryStage</span><span class="o">.</span><span class="na">show</span><span class="o">();</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">launch</span><span class="o">(</span><span class="n">args</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Essentially we create some buttons, stuff them into a ToolBar and it to the Scene. Additionally we assign some style classes in order to do the color magic later on.<br/>
Doing the old school way we would have ended up editing all of the buttons colors.</p>

<p>But if we take a closer look at the default button colors..</p>

<figure class='code'><figcaption><span>modena.css</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='css'><span class='line'><span class="nc">.button</span> <span class="p">{</span>
</span><span class='line'>    <span class="o">-</span><span class="n">fx</span><span class="o">-</span><span class="k">background-color</span><span class="o">:</span> <span class="o">-</span><span class="n">fx</span><span class="o">-</span><span class="n">shadow</span><span class="o">-</span><span class="n">highlight</span><span class="o">-</span><span class="k">color</span><span class="o">,</span> <span class="o">-</span><span class="n">fx</span><span class="o">-</span><span class="n">outer</span><span class="o">-</span><span class="k">border</span><span class="o">,</span> <span class="o">-</span><span class="n">fx</span><span class="o">-</span><span class="n">inner</span><span class="o">-</span><span class="k">border</span><span class="o">,</span> <span class="o">-</span><span class="n">fx</span><span class="o">-</span><span class="n">body</span><span class="o">-</span><span class="k">color</span><span class="p">;</span>
</span><span class='line'>    <span class="o">-</span><span class="n">fx</span><span class="o">-</span><span class="k">text</span><span class="o">-</span><span class="n">fill</span><span class="o">:</span> <span class="o">-</span><span class="n">fx</span><span class="o">-</span><span class="k">text</span><span class="o">-</span><span class="n">base</span><span class="o">-</span><span class="k">color</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>..you may see the colors are referenced, and as you may guess they are derived of the aforementioned base colors.<br/>
For example look at the border color, defined in the root of the modena theme:</p>

<figure class='code'><figcaption><span>modena.css</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='css'><span class='line'><span class="nc">.root</span> <span class="p">{</span>
</span><span class='line'>  <span class="o">-</span><span class="n">fx</span><span class="o">-</span><span class="n">outer</span><span class="o">-</span><span class="k">border</span><span class="o">:</span> <span class="n">derive</span><span class="p">(</span><span class="o">-</span><span class="n">fx</span><span class="o">-</span><span class="k">color</span><span class="o">,</span> <span class="m">-23%</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>So to put all of this together, we only need these simple rules in our CSS file:</p>

<figure class='code'><figcaption><span>application.css</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='css'><span class='line'><span class="nc">.red</span> <span class="p">{</span>
</span><span class='line'>  <span class="o">-</span><span class="n">fx</span><span class="o">-</span><span class="n">base</span><span class="o">:</span> <span class="nb">red</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="nc">.green</span> <span class="p">{</span>
</span><span class='line'>  <span class="o">-</span><span class="n">fx</span><span class="o">-</span><span class="n">base</span><span class="o">:</span> <span class="nb">green</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>What happens is that we changed the base color on each of the buttons. Now JavaFX is clever enough to detect that with a different base color, the derived colors for each of the buttons (and its children) need an update.</p>

<h2>Wait there&rsquo;s more</h2>

<p>Now this was a very basic example, but to give you another example we can switch the base color of the root container to create our own &ldquo;dark theme&rdquo;:</p>

<figure class='code'><figcaption><span>application.css</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='css'><span class='line'><span class="nc">.root</span> <span class="p">{</span>
</span><span class='line'>  <span class="o">-</span><span class="n">fx</span><span class="o">-</span><span class="n">base</span><span class="o">:</span> <span class="nb">darkgray</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>This will result in this darker version of our sample application:<br/>
<img src="http://eckig.github.io/assets/images/javafx-color-derivation-screenshot-2.png" alt="Java FX Color derivation example" /><br/>
Using derived colors throughout your application will make your life a lot easier!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Hello World]]></title>
    <link href="http://eckig.github.io/blog/2014/08/17/hello-world/"/>
    <updated>2014-08-17T15:31:03+02:00</updated>
    <id>http://eckig.github.io/blog/2014/08/17/hello-world</id>
    <content type="html"><![CDATA[<p>I just finished developing my first Octopress theme.</p>

<p>I hope to add some meaningful content soon ;-)</p>
]]></content>
  </entry>
  
</feed>
