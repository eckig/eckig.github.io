<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[eckig]]></title>
  <link href="http://eckig.github.io/atom.xml" rel="self"/>
  <link href="http://eckig.github.io/"/>
  <updated>2014-12-05T07:58:28+01:00</updated>
  <id>http://eckig.github.io/</id>
  <author>
    <name><![CDATA[Steffen Rachner]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Bidirectional Binding for Selection Model]]></title>
    <link href="http://eckig.github.io/blog/2014/12/05/bidirectional-binding-for-selection-model/"/>
    <updated>2014-12-05T07:17:47+01:00</updated>
    <id>http://eckig.github.io/blog/2014/12/05/bidirectional-binding-for-selection-model</id>
    <content type="html"><![CDATA[<p>I do not know why the JavaFX developers have not included this in the existing toolset, so I created this by myself based on the JavaFX BidirectionalBinding class: A BidirectionalBinding between a <a href="https://docs.oracle.com/javase/8/javafx/api/javafx/scene/control/SelectionModel.html">SelectionModel</a> and an <a href="https://docs.oracle.com/javase/8/javafx/api/javafx/beans/property/ObjectProperty.html">ObjectProperty</a>.</p>

<p>Whenever the ObjectProperty changes, the selection is updated and when the selection changes the ObjectProperty is updated. I <a href="https://gist.github.com/eckig/03c6c2d6920c69b79ad4">posted the code at Github</a>.</p>

<p>Usage is typically by a static factory method, so here you go:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">static</span> <span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="kt">void</span> <span class="nf">bindBidirectional</span><span class="o">(</span><span class="n">Property</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="n">pProperty</span><span class="o">,</span>
</span><span class='line'>      <span class="n">SelectionModel</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="n">pSelectionModel</span><span class="o">,</span> <span class="kt">boolean</span> <span class="n">pInitialValueFromSelection</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">SelectionModelBidirectionalBinding</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="n">binding</span> <span class="o">=</span> <span class="k">new</span> <span class="n">SelectionModelBidirectionalBinding</span><span class="o">&lt;&gt;(</span>
</span><span class='line'>          <span class="n">pProperty</span><span class="o">,</span> <span class="n">pSelectionModel</span><span class="o">);</span>
</span><span class='line'>  <span class="k">if</span> <span class="o">(</span><span class="n">pInitialValueFromSelection</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">pProperty</span><span class="o">.</span><span class="na">setValue</span><span class="o">(</span><span class="n">pSelectionModel</span><span class="o">.</span><span class="na">getSelectedItem</span><span class="o">());</span>
</span><span class='line'>  <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">pSelectionModel</span><span class="o">.</span><span class="na">select</span><span class="o">(</span><span class="n">pProperty</span><span class="o">.</span><span class="na">getValue</span><span class="o">());</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>  <span class="n">pProperty</span><span class="o">.</span><span class="na">addListener</span><span class="o">(</span><span class="n">binding</span><span class="o">);</span>
</span><span class='line'>  <span class="n">pSelectionModel</span><span class="o">.</span><span class="na">selectedItemProperty</span><span class="o">().</span><span class="na">addListener</span><span class="o">(</span><span class="n">binding</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>This method differs a little bit from the default JavaFX BidirectionalBindings by adding a third argument: The boolean argument is to decide where the initial value should be extracted from: Either from the ObjectProperty or the SelectionModel.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Resizable Grid Using Canvas]]></title>
    <link href="http://eckig.github.io/blog/2014/11/06/resizable-grid-using-canvas/"/>
    <updated>2014-11-06T18:38:10+01:00</updated>
    <id>http://eckig.github.io/blog/2014/11/06/resizable-grid-using-canvas</id>
    <content type="html"><![CDATA[<p>Inspired by <a href="http://fxexperience.com/2014/05/resizable-grid-using-canvas/">Jasper Potts post showing how to create a resizable &ldquo;DotGrid&rdquo;</a> in JavaFX using the <a href="http://docs.oracle.com/javase/8/javafx/api/javafx/scene/canvas/Canvas.html">Canvas API</a> I went ahead and modified a bit, because I needed a similar approach for a contribution.</p>

<p>So I changed the visuals to actually draw a grid (horizontal and vertical lines) instead of dots and added styleable CSS properties to customize grid size and color via CSS.</p>

<p>You can view the final <a href="https://gist.github.com/eckig/176b7c2a10048bb71f43">Code at Github</a>.
If you are concerned about its performance, you may even increase its speed by only redrawing the part of the canvas that has changed..</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Using JavaFX's Properties]]></title>
    <link href="http://eckig.github.io/blog/2014/09/01/using-javafxs-properties/"/>
    <updated>2014-09-01T19:48:48+02:00</updated>
    <id>http://eckig.github.io/blog/2014/09/01/using-javafxs-properties</id>
    <content type="html"><![CDATA[<p>First a general reminder: Do not get into <a href="http://blog.codinghorror.com/the-sad-tragedy-of-micro-optimization-theater/">micro-optimization</a> - It clutters the code for little to no benefit!</p>

<p>So with JavaFX we got a very nice API for writing user interface applications and with Java 8&rsquo;s Lambda Expressions it is even more fun. Just a single line of code is needed to wire up a new listener:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">event</span><span class="o">.</span><span class="na">resultStatusProperty</span><span class="o">().</span><span class="na">addListener</span><span class="o">(</span><span class="n">obs</span> <span class="o">-&gt;</span> <span class="n">doMagic</span><span class="o">());</span>
</span></code></pre></td></tr></table></div></figure>


<p></p>

<!-- more -->


<p>Now that is not a bad thing at all, but I have seen two common things that developers tend to ignore or do not know:</p>

<h2>1. Creating a JavaFX Property</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">private</span> <span class="kd">final</span> <span class="n">ObjectProperty</span><span class="o">&lt;</span><span class="n">ResultStatus</span><span class="o">&gt;</span> <span class="n">resultStatus</span> <span class="o">=</span>
</span><span class='line'>    <span class="k">new</span> <span class="n">SimpleObjectProperty</span><span class="o">&lt;&gt;(</span><span class="k">this</span><span class="o">,</span> <span class="s">&quot;resultStatus&quot;</span><span class="o">,</span> <span class="n">initialResultStatus</span><span class="o">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>
This is an example of an ObjectProperty, but the other (primitive type) Properties work the same way: As definied in <a href="http://docs.oracle.com/javase/8/javafx/api/javafx/beans/property/ReadOnlyProperty.html">javafx.beans.property.ReadOnlyProperty</a> every Property has a <strong>bean</strong> and a <strong>name</strong> as additional, optional attributes.<br/>
I often see JavaFX code creating Properties only using the value side, leaving out bean and name. Why should I use it, you ask? Well, let us move on:</p>

<h2>2. Using JavaFX Property Listeners</h2>

<p>There are two types of a listener that may be added to a JavaFX Property:</p>

<ol>
<li><a href="http://docs.oracle.com/javase/8/javafx/api/javafx/beans/InvalidationListener.html">InvalidationListener</a></li>
<li><a href="http://docs.oracle.com/javase/8/javafx/api/javafx/beans/value/ChangeListener.html">ChangeListener</a></li>
</ol>


<p>I won&rsquo;t go much into detail discussing the pros and cons of every one, this would be out of scope of this article. Maybe another time.<br/>
Besides having different names and different use cases, they have some things in common:</p>

<ul>
<li>They are both functional interfaces, so they may be expressed as Lambdas</li>
<li>Both receive an <a href="http://docs.oracle.com/javase/8/javafx/api/javafx/beans/Observable.html">Observable</a> passed on as first argument on each change.</li>
</ul>


<p>Well, our ObjectProperty for instance and every other JavaFX property is implementing Observable!</p>

<h2>Example</h2>

<p>Let us assume, we have an application tracking server-side events. There are thousands of them over the course of a day. The server will push new events to our client application. But the event will be in progress and we can not process the event(s) until they are finished.<br/>
The naive way of doing this would be to just do this</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">event</span><span class="o">.</span><span class="na">resultStatusProperty</span><span class="o">().</span><span class="na">addListener</span><span class="o">(</span><span class="n">obs</span> <span class="o">-&gt;</span> <span class="n">doMagic</span><span class="o">());</span>
</span></code></pre></td></tr></table></div></figure>


<p>
on every incoming event. Works great. Time to go home.<br/>
But since our client application is already struggling by dealing with thousands of events we can actually improve client load by using what I just tried to explain:</p>

<h2>Creating the Listener</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">InvalidationListener</span> <span class="n">resultStatusListener</span> <span class="o">=</span> <span class="n">pObservable</span> <span class="o">-&gt;</span>
</span><span class='line'><span class="o">{</span>
</span><span class='line'>  <span class="k">if</span> <span class="o">(</span><span class="n">pObservable</span> <span class="k">instanceof</span> <span class="n">ObjectProperty</span> <span class="o">&amp;&amp;</span>
</span><span class='line'>      <span class="o">((</span><span class="n">ObjectProperty</span><span class="o">&lt;?&gt;)</span> <span class="n">pObservable</span><span class="o">).</span><span class="na">getBean</span><span class="o">()</span> <span class="k">instanceof</span> <span class="n">ArchiveEvent</span><span class="o">)</span>
</span><span class='line'>  <span class="o">{</span>
</span><span class='line'>      <span class="n">ArchiveEvent</span> <span class="n">event</span> <span class="o">=</span> <span class="o">(</span><span class="n">ArchiveEvent</span><span class="o">)</span> <span class="o">((</span><span class="n">ObjectProperty</span><span class="o">&lt;?&gt;)</span> <span class="n">pObservable</span><span class="o">).</span><span class="na">getBean</span><span class="o">();</span>
</span><span class='line'>      <span class="k">switch</span> <span class="o">(</span><span class="n">event</span><span class="o">.</span><span class="na">getResultStatus</span><span class="o">())</span>
</span><span class='line'>      <span class="o">{</span>
</span><span class='line'>          <span class="k">case</span> <span class="nl">SUCCESS:</span>
</span><span class='line'>              <span class="c1">// TODO</span>
</span><span class='line'>              <span class="k">break</span><span class="o">;</span>
</span><span class='line'>          <span class="k">case</span> <span class="nl">FAILED:</span>
</span><span class='line'>              <span class="c1">// TODO</span>
</span><span class='line'>              <span class="k">break</span><span class="o">;</span>
</span><span class='line'>          <span class="k">case</span> <span class="nl">WARNING:</span>
</span><span class='line'>              <span class="c1">// TODO</span>
</span><span class='line'>              <span class="k">break</span><span class="o">;</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">};</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now we have created THE listener, we just use this <strong>one instance</strong> on every result property of every incoming event.<br/>
And it is quite simple: Every time a property becomes invalid we check if it is an instance of our result property and if the bean has been properly set (instanceof does an implicit null check).</p>

<p>And this is just a small example, you can go further on by not only using the bean but also name of the property.<br/>
Yes, you will need a few more lines of code for checking and casting but that saved you a lot of memory if you create/attach serious amounts of listeners.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[JavaFX Color Derivation]]></title>
    <link href="http://eckig.github.io/blog/2014/08/18/javafx-color-derivation/"/>
    <updated>2014-08-18T18:35:51+02:00</updated>
    <id>http://eckig.github.io/blog/2014/08/18/javafx-color-derivation</id>
    <content type="html"><![CDATA[<p>A very powerful and often underestimated feature of JavaFX is its CSS Color Derivation.<br/>
But let us start at the beginning by explaining two prerequisites:</p>

<ol>
<li>The Default JavaFX 8 Theme (<a href="http://fxexperience.com/2013/01/modena-new-theme-for-javafx-8/">Modena</a>) only defines a few colors statically in its stylesheet. The rest is derived by JavaFX&rsquo;s color functions (ladder and derive - see the <a href="http://docs.oracle.com/javase/8/javafx/api/javafx/scene/doc-files/cssref.html#typecolor">CSS Reference</a>) or referenced as color variables.</li>
<li>If you start to apply a custom styles to a Node in the scenegraph, these styles will also be applied to all children of this Node (if applicable). So changing a color variable on a single node will change the corresponding colors, derived colors and referenced colors on all child nodes in the scenegraph, but not on any of its parent nodes.</li>
</ol>


<p>If we combine both together we can create these three Buttons with ease (the first one is a regular one, just to show the default theme):<br/>
<img src="http://eckig.github.io/assets/images/javafx-color-derivation-screenshot-1.png" alt="Java FX Color derivation example" /></p>

<!-- more -->


<p>But let&rsquo;s start with the Java Code for our little example:</p>

<figure class='code'><figcaption><span>Test.java</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Main</span> <span class="kd">extends</span> <span class="n">Application</span> <span class="o">{</span>
</span><span class='line'>    <span class="nd">@Override</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">start</span><span class="o">(</span><span class="n">Stage</span> <span class="n">primaryStage</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">Button</span> <span class="n">red</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">Button</span><span class="o">(</span><span class="s">&quot;red&quot;</span><span class="o">);</span>
</span><span class='line'>        <span class="n">red</span><span class="o">.</span><span class="na">getStyleClass</span><span class="o">().</span><span class="na">add</span><span class="o">(</span><span class="s">&quot;red&quot;</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">Button</span> <span class="n">green</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">Button</span><span class="o">(</span><span class="s">&quot;green&quot;</span><span class="o">);</span>
</span><span class='line'>        <span class="n">green</span><span class="o">.</span><span class="na">getStyleClass</span><span class="o">().</span><span class="na">add</span><span class="o">(</span><span class="s">&quot;green&quot;</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">Button</span> <span class="n">regular</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">Button</span><span class="o">(</span><span class="s">&quot;regular&quot;</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">BorderPane</span> <span class="n">root</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">BorderPane</span><span class="o">();</span>
</span><span class='line'>        <span class="n">root</span><span class="o">.</span><span class="na">setTop</span><span class="o">(</span><span class="k">new</span> <span class="nf">ToolBar</span><span class="o">(</span><span class="n">regular</span><span class="o">,</span> <span class="n">red</span><span class="o">,</span> <span class="n">green</span><span class="o">));</span>
</span><span class='line'>        <span class="n">Scene</span> <span class="n">scene</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">Scene</span><span class="o">(</span><span class="n">root</span><span class="o">,</span> <span class="mi">400</span><span class="o">,</span> <span class="mi">400</span><span class="o">);</span>
</span><span class='line'>        <span class="n">scene</span><span class="o">.</span><span class="na">getStylesheets</span><span class="o">().</span><span class="na">add</span><span class="o">(</span><span class="n">getClass</span><span class="o">().</span><span class="na">getResource</span><span class="o">(</span><span class="s">&quot;application.css&quot;</span><span class="o">).</span><span class="na">toExternalForm</span><span class="o">());</span>
</span><span class='line'>        <span class="n">primaryStage</span><span class="o">.</span><span class="na">setScene</span><span class="o">(</span><span class="n">scene</span><span class="o">);</span>
</span><span class='line'>        <span class="n">primaryStage</span><span class="o">.</span><span class="na">show</span><span class="o">();</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">launch</span><span class="o">(</span><span class="n">args</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Essentially we create some buttons, stuff them into a ToolBar and it to the Scene. Additionally we assign some style classes in order to do the color magic later on.<br/>
Doing the old school way we would have ended up editing all of the buttons colors.</p>

<p>But if we take a closer look at the default button colors..</p>

<figure class='code'><figcaption><span>modena.css</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='css'><span class='line'><span class="nc">.button</span> <span class="p">{</span>
</span><span class='line'>    <span class="o">-</span><span class="n">fx</span><span class="o">-</span><span class="k">background-color</span><span class="o">:</span> <span class="o">-</span><span class="n">fx</span><span class="o">-</span><span class="n">shadow</span><span class="o">-</span><span class="n">highlight</span><span class="o">-</span><span class="k">color</span><span class="o">,</span> <span class="o">-</span><span class="n">fx</span><span class="o">-</span><span class="n">outer</span><span class="o">-</span><span class="k">border</span><span class="o">,</span> <span class="o">-</span><span class="n">fx</span><span class="o">-</span><span class="n">inner</span><span class="o">-</span><span class="k">border</span><span class="o">,</span> <span class="o">-</span><span class="n">fx</span><span class="o">-</span><span class="n">body</span><span class="o">-</span><span class="k">color</span><span class="p">;</span>
</span><span class='line'>    <span class="o">-</span><span class="n">fx</span><span class="o">-</span><span class="k">text</span><span class="o">-</span><span class="n">fill</span><span class="o">:</span> <span class="o">-</span><span class="n">fx</span><span class="o">-</span><span class="k">text</span><span class="o">-</span><span class="n">base</span><span class="o">-</span><span class="k">color</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>..you may see the colors are referenced, and as you may guess they are derived of the aforementioned base colors.<br/>
For example look at the border color, defined in the root of the modena theme:</p>

<figure class='code'><figcaption><span>modena.css</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='css'><span class='line'><span class="nc">.root</span> <span class="p">{</span>
</span><span class='line'>  <span class="o">-</span><span class="n">fx</span><span class="o">-</span><span class="n">outer</span><span class="o">-</span><span class="k">border</span><span class="o">:</span> <span class="n">derive</span><span class="p">(</span><span class="o">-</span><span class="n">fx</span><span class="o">-</span><span class="k">color</span><span class="o">,</span> <span class="m">-23%</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>So to put all of this together, we only need these simple rules in our CSS file:</p>

<figure class='code'><figcaption><span>application.css</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='css'><span class='line'><span class="nc">.red</span> <span class="p">{</span>
</span><span class='line'>  <span class="o">-</span><span class="n">fx</span><span class="o">-</span><span class="n">base</span><span class="o">:</span> <span class="nb">red</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="nc">.green</span> <span class="p">{</span>
</span><span class='line'>  <span class="o">-</span><span class="n">fx</span><span class="o">-</span><span class="n">base</span><span class="o">:</span> <span class="nb">green</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>What happens is that we changed the base color on each of the buttons. Now JavaFX is clever enough to detect that with a different base color, the derived colors for each of the buttons (and its children) need an update.</p>

<h2>Wait there&rsquo;s more</h2>

<p>Now this was a very basic example, but to give you another example we can switch the base color of the root container to create our own &ldquo;dark theme&rdquo;:</p>

<figure class='code'><figcaption><span>application.css</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='css'><span class='line'><span class="nc">.root</span> <span class="p">{</span>
</span><span class='line'>  <span class="o">-</span><span class="n">fx</span><span class="o">-</span><span class="n">base</span><span class="o">:</span> <span class="nb">darkgray</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>This will result in this darker version of our sample application:<br/>
<img src="http://eckig.github.io/assets/images/javafx-color-derivation-screenshot-2.png" alt="Java FX Color derivation example" /><br/>
Using derived colors throughout your application will make your life a lot easier!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Hello World]]></title>
    <link href="http://eckig.github.io/blog/2014/08/17/hello-world/"/>
    <updated>2014-08-17T15:31:03+02:00</updated>
    <id>http://eckig.github.io/blog/2014/08/17/hello-world</id>
    <content type="html"><![CDATA[<p>I just finished developing my first Octopress theme.</p>

<p>I hope to add some meaningful content soon ;-)</p>
]]></content>
  </entry>
  
</feed>
