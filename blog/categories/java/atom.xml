<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Java | eckig]]></title>
  <link href="http://eckig.github.io/blog/categories/java/atom.xml" rel="self"/>
  <link href="http://eckig.github.io/"/>
  <updated>2015-05-10T09:19:58+02:00</updated>
  <id>http://eckig.github.io/</id>
  <author>
    <name><![CDATA[Steffen]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Bidirectional Binding for Selection Model]]></title>
    <link href="http://eckig.github.io/blog/2014/12/05/bidirectional-binding-for-selection-model/"/>
    <updated>2014-12-05T08:03:23+01:00</updated>
    <id>http://eckig.github.io/blog/2014/12/05/bidirectional-binding-for-selection-model</id>
    <content type="html"><![CDATA[<p>I do not know why the JavaFX developers have not included this in the existing toolset, so I created this by myself based on the JavaFX BidirectionalBinding class: A BidirectionalBinding between a <a href="https://docs.oracle.com/javase/8/javafx/api/javafx/scene/control/SelectionModel.html">SelectionModel</a> and an <a href="https://docs.oracle.com/javase/8/javafx/api/javafx/beans/property/ObjectProperty.html">ObjectProperty</a>.</p>

<p>Whenever the ObjectProperty changes, the selection is updated and when the selection changes the ObjectProperty is updated. <a href="https://gist.github.com/eckig/03c6c2d6920c69b79ad4">I posted the code at Github</a>.</p>

<p>Usage is typically by a static factory method, so here you go:</p>

<pre><code class="java">public static &lt;T&gt; void bindBidirectional(Property&lt;T&gt; pProperty,
      SelectionModel&lt;T&gt; pSelectionModel, boolean pInitialValueFromSelection) {

  SelectionModelBidirectionalBinding&lt;T&gt; binding = new SelectionModelBidirectionalBinding&lt;&gt;(
          pProperty, pSelectionModel);
  if (pInitialValueFromSelection) {
      pProperty.setValue(pSelectionModel.getSelectedItem());
  } else {
      pSelectionModel.select(pProperty.getValue());
  }
  pProperty.addListener(binding);
  pSelectionModel.selectedItemProperty().addListener(binding);
}
</code></pre>

<p>This method differs a little bit from the default JavaFX BidirectionalBindings by adding a third argument: The boolean argument is to decide where the initial value should be extracted from: Either from the ObjectProperty or the SelectionModel.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Resizable Grid Using Canvas]]></title>
    <link href="http://eckig.github.io/blog/2014/11/06/resizable-grid-using-canvas/"/>
    <updated>2014-11-06T18:38:10+01:00</updated>
    <id>http://eckig.github.io/blog/2014/11/06/resizable-grid-using-canvas</id>
    <content type="html"><![CDATA[<p>Inspired by <a href="http://fxexperience.com/2014/05/resizable-grid-using-canvas/">Jasper Potts post showing how to create a resizable &ldquo;DotGrid&rdquo;</a> in JavaFX using the <a href="http://docs.oracle.com/javase/8/javafx/api/javafx/scene/canvas/Canvas.html">Canvas API</a> I went ahead and modified a bit, because I needed a similar approach for a contribution.</p>

<p>So I changed the visuals to actually draw a grid (horizontal and vertical lines) instead of dots and added styleable CSS properties to customize grid size and color via CSS.</p>

<p>You can view the final <a href="https://gist.github.com/eckig/176b7c2a10048bb71f43">Code at Github</a>.
If you are concerned about its performance, you may even increase its speed by only redrawing the part of the canvas that has changed..</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Using JavaFX's Properties]]></title>
    <link href="http://eckig.github.io/blog/2014/09/01/using-javafxs-properties/"/>
    <updated>2014-09-01T19:48:48+02:00</updated>
    <id>http://eckig.github.io/blog/2014/09/01/using-javafxs-properties</id>
    <content type="html"><![CDATA[<p>First a general reminder: Do not get into <a href="http://blog.codinghorror.com/the-sad-tragedy-of-micro-optimization-theater/">micro-optimization</a> - It clutters the code for little to no benefit!</p>

<p>So with JavaFX we got a very nice API for writing user interface applications and with Java 8&rsquo;s Lambda Expressions it is even more fun. Just a single line of code is needed to wire up a new listener:</p>

<pre><code class="java">event.resultStatusProperty().addListener(obs -&gt; doMagic());
</code></pre>

<!-- more -->


<p>Now that is not a bad thing at all, but I have seen two common things that developers tend to ignore or do not know:</p>

<h2>1. Creating a JavaFX Property</h2>

<pre><code class="java">private final ObjectProperty&lt;ResultStatus&gt; resultStatus =
    new SimpleObjectProperty&lt;&gt;(this, "resultStatus", initialResultStatus);
</code></pre>

<p>This is an example of an ObjectProperty, but the other (primitive type) Properties work the same way: As definied in <a href="http://docs.oracle.com/javase/8/javafx/api/javafx/beans/property/ReadOnlyProperty.html">javafx.beans.property.ReadOnlyProperty</a> every Property has a <strong>bean</strong> and a <strong>name</strong> as additional, optional attributes.<br/>
I often see JavaFX code creating Properties only using the value side, leaving out bean and name. Why should I use it, you ask? Well, let us move on:</p>

<h2>2. Using JavaFX Property Listeners</h2>

<p>There are two types of a listener that may be added to a JavaFX Property:</p>

<ol>
<li><a href="http://docs.oracle.com/javase/8/javafx/api/javafx/beans/InvalidationListener.html">InvalidationListener</a></li>
<li><a href="http://docs.oracle.com/javase/8/javafx/api/javafx/beans/value/ChangeListener.html">ChangeListener</a></li>
</ol>


<p>I won&rsquo;t go much into detail discussing the pros and cons of every one, this would be out of scope of this article. Maybe another time.<br/>
Besides having different names and different use cases, they have some things in common:</p>

<ul>
<li>They are both functional interfaces, so they may be expressed as Lambdas</li>
<li>Both receive an <a href="http://docs.oracle.com/javase/8/javafx/api/javafx/beans/Observable.html">Observable</a> passed on as first argument on each change.</li>
</ul>


<p>Well, our ObjectProperty for instance and every other JavaFX property is implementing Observable!</p>

<h2>Example</h2>

<p>Let us assume, we have an application tracking server-side events. There are thousands of them over the course of a day. The server will push new events to our client application. But the event will be in progress and we can not process the event(s) until they are finished.<br/>
The naive way of doing this would be to just do this
<code>java
event.resultStatusProperty().addListener(obs -&gt; doMagic());
</code>
on every incoming event. Works great. Time to go home.<br/>
But since our client application is already struggling by dealing with thousands of events we can actually improve client load by using what I just tried to explain:</p>

<h2>Creating the Listener</h2>

<pre><code class="java">InvalidationListener resultStatusListener = pObservable -&gt;
{
    if (pObservable instanceof ObjectProperty &amp;&amp;
        ((ObjectProperty&lt;?&gt;) pObservable).getBean() instanceof ArchiveEvent)
    {
        ArchiveEvent event = (ArchiveEvent) ((ObjectProperty&lt;?&gt;) pObservable).getBean();
        switch (event.getResultStatus())
        {
            case SUCCESS:
                // TODO
                break;
            case FAILED:
                // TODO
                break;
            case WARNING:
                // TODO
                break;
        }
    }
};
</code></pre>

<p>Now we have created THE listener, we just use this <strong>one instance</strong> on every result property of every incoming event.<br/>
And it is quite simple: Every time a property becomes invalid we check if it is an instance of our result property and if the bean has been properly set (instanceof does an implicit null check).</p>

<p>And this is just a small example, you can go further on by not only using the bean but also name of the property.<br/>
Yes, you will need a few more lines of code for checking and casting but that saved you a lot of memory if you create/attach serious amounts of listeners.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[JavaFX Color Derivation]]></title>
    <link href="http://eckig.github.io/blog/2014/08/18/javafx-color-derivation/"/>
    <updated>2014-08-18T18:35:51+02:00</updated>
    <id>http://eckig.github.io/blog/2014/08/18/javafx-color-derivation</id>
    <content type="html"><![CDATA[<p>A very powerful and often underestimated feature of JavaFX is its CSS Color Derivation.<br/>
But let us start at the beginning by explaining two prerequisites:</p>

<ol>
<li>The Default JavaFX 8 Theme (<a href="http://fxexperience.com/2013/01/modena-new-theme-for-javafx-8/">Modena</a>) only defines a few colors statically in its stylesheet. The rest is derived by JavaFX&rsquo;s color functions (ladder and derive - see the <a href="http://docs.oracle.com/javase/8/javafx/api/javafx/scene/doc-files/cssref.html#typecolor">CSS Reference</a>) or referenced as color variables.</li>
<li>If you start to apply a custom styles to a Node in the scenegraph, these styles will also be applied to all children of this Node (if applicable). So changing a color variable on a single node will change the corresponding colors, derived colors and referenced colors on all child nodes in the scenegraph, but not on any of its parent nodes.</li>
</ol>


<p>If we combine both together we can create these three Buttons with ease (the first one is a regular one, just to show the default theme):<br/>
<img src="/assets/images/javafx-color-derivation-screenshot-1.png" alt="Java FX Color derivation example" /></p>

<!-- more -->


<p>But let&rsquo;s start with the Java Code for our little example:</p>

<pre><code class="java Test.java">public class Main extends Application {
    @Override
    public void start(Stage primaryStage) {
        Button red = new Button("red");
        red.getStyleClass().add("red");

        Button green = new Button("green");
        green.getStyleClass().add("green");

        Button regular = new Button("regular");

        BorderPane root = new BorderPane();
        root.setTop(new ToolBar(regular, red, green));
        Scene scene = new Scene(root, 400, 400);
        scene.getStylesheets().add(getClass().getResource("application.css").toExternalForm());
        primaryStage.setScene(scene);
        primaryStage.show();
    }

    public static void main(String[] args) {
        launch(args);
    }
}
</code></pre>

<p>Essentially we create some buttons, stuff them into a ToolBar and it to the Scene. Additionally we assign some style classes in order to do the color magic later on.<br/>
Doing the old school way we would have ended up editing all of the buttons colors.</p>

<p>But if we take a closer look at the default button colors..</p>

<pre><code class="css modena.css">.button {
    -fx-background-color: -fx-shadow-highlight-color, -fx-outer-border, -fx-inner-border, -fx-body-color;
    -fx-text-fill: -fx-text-base-color;
}
</code></pre>

<p>..you may see the colors are referenced, and as you may guess they are derived of the aforementioned base colors.<br/>
For example look at the border color, defined in the root of the modena theme:</p>

<pre><code class="css modena.css">.root {
    -fx-outer-border: derive(-fx-color, -23%);
}
</code></pre>

<p>So to put all of this together, we only need these simple rules in our CSS file:</p>

<pre><code class="css application.css">.red {
    -fx-base: red;
}
.green {
    -fx-base: green;
}
</code></pre>

<p>What happens is that we changed the base color on each of the buttons. Now JavaFX is clever enough to detect that with a different base color, the derived colors for each of the buttons (and its children) need an update.</p>

<h2>Wait there&rsquo;s more</h2>

<p>Now this was a very basic example, but to give you another example we can switch the base color of the root container to create our own &ldquo;dark theme&rdquo;:
<code>css application.css
.root {
    -fx-base: darkgray;
}
</code></p>

<p>This will result in this darker version of our sample application:<br/>
<img src="/assets/images/javafx-color-derivation-screenshot-2.png" alt="Java FX Color derivation example" /><br/>
Using derived colors throughout your application will make your life a lot easier!</p>
]]></content>
  </entry>
  
</feed>
